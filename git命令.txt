//注册
$ git config --global user.name "Your Name"
$ git config --global user.email "email@example.com"

//生成远程仓库 ssh key （生成成功会有存放路径提示）
$ ssh-keygen -t rsa -C "youremail@example.com"

//初始化一个Git仓库，使用命令。
$ git init

//添加文件到Git仓库，分两步：每次修改，如果不用git add到暂存区，那就不会加入到commit中。
使用命令git add <file>，注意，可反复多次使用，添加多个文件；
使用命令git commit -m <message>，完成。

//要随时掌握工作区的状态
$ git status

//如果git status告诉你有文件被修改过，可以查看修改内容
$ git diff


//HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令
$ git reset --hard commit_id。
$ git reset --hard HEAD^    特殊用法：上个版本
$ git reset --hard HEAD^^ 	特殊用法：上上个版本

//穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本（最好使用 --pretty=oneline）按q可以退出
$ git log --pretty=oneline
$ git log --graph    查看日志分支图

//要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。
$ git reflog

//当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，
$ git checkout -- file

//当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，
第一步用命令
$ git reset HEAD <file>
第二步用命令
$ git checkout -- file

//命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。
$ git rm <file>

//关联github（远程）仓库与本地仓库
$ git remote add origin https://github.com/gefeiannan/JavaProject.git
$ git push -u origin master   首次推送master分支所有内容
$ git push origin master    推送master分支最新修改

//要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。
$ git clone git@github.com:gefeiannan/GitLearn.git

//查看分支
$ git branch
//创建分支
$ git branch <name>
//切换分支
$ git checkout <name>
//创建+切换分支
$ git checkout -b <name>
//合并某分支到当前分支
$ git merge <name>
//删除分支
$ git branch -d <name>



//在gitbash中操作文件
$ touch <file> 创建文件
$ vi <file> 编辑文件
i键进入编辑状态
esc后，输入:wq 保存并退出

//修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；
//当手头工作没有完成时，先把工作现场
$ git stash 然后去修复bug，修复后，再
$ git stash pop 回到工作现场。

//开发一个新feature，最好新建一个分支；
//如果要丢弃一个没有被合并过的分支，可以通过
$ git branch -D <name> 强行删除。

??遗留问题
从远程仓库克隆下来的版本，怎样回到上个版本再次提交到远程仓库？
